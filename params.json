{"name":"Django-client-errors","body":"# Django Client Errors\r\n\r\nAutomatic tracking of javascript errors for Django. Sends error information back to the \r\nserver to be persisted in the database, uses jQuery if available to send all information, \r\nfalling back to a GET request to send limited information.\r\n\r\n\r\n## Installation\r\n\r\n```bash\r\npip install django-client-errors\r\n````\r\n\r\nAlternatively, you can download the project and put the `client_errors` directory into \r\nyour project directory.\r\n\r\nAdd the following app to your project's `INSTALLED_APPS` in the `settings.py` file:\r\n\r\n````\r\n'client_errors',\r\n````\r\n\r\nAdd the following middleware to your project's `MIDDLEWARE_CLASSES` in the `settings.py` file:\r\n\r\n````\r\nclient_errors.middleware.ClientErrorMiddleware',\r\n````\r\n\r\nSince this module contains a model of its own, you must add it to the database schema:\r\n\r\n````\r\npython manage.py syncdb\r\n````\r\n\r\nOr, if you are using `south` to manage your project, you can run the following command,\r\nhowever, this is best to use only if you have included the source code inside of your project.\r\nOtherwise, it will attempt to add the migration to the egg directory.\r\n\r\n````\r\npython manage.py schemamigration client_errors\r\n````\r\n\r\nNote:\r\n\r\nTying into middleware allows each panel to be instantiated on request and\r\nrendering to happen on response.\r\n\r\nThe order of MIDDLEWARE_CLASSES is important: the Client Error middleware\r\nmust come after any other middleware that encodes the response's content\r\n(such as GZipMiddleware).\r\n\r\nIf you are using the `django_debug_toolbar`, the `client_error` middleware must\r\ncome after it.\r\n\r\nThe javascript will only be added if the mimetype of the\r\nresponse is either `text/html` or `application/xhtml+xml` and contains the selected\r\nhtml tag, the `</head>` tag by default.\r\n\r\nNote: Be aware of middleware ordering and other middleware that may\r\nintercept requests and return responses.  Putting the debug toolbar\r\nmiddleware *after* the Flatpage middleware, for example, means the\r\ntoolbar will not show up on flatpages.\r\n\r\n\r\n## Usage\r\n\r\nWhen an error occurs, the app will save the following information:\r\n\r\n* `created` current timestamp\r\n* `message` javascript error text\r\n* `url` where the error occurred\r\n* `loc` line of code\r\n* `os` user's operating system\r\n* `browser` user's browser\r\n* `version` user's browser version\r\n\r\nIf jQuery is found on the page, the app will send the following information as \r\nserialized JSON (not sent otherwise due to URL size constraints)\r\n\r\n* `plugins` list of browser enabled plugins\r\n* `device` user's device information\r\n* `locale` user's country and language\r\n\r\n\r\n## Example\r\n\r\nTo access the errors for a given user you could do something like this:\r\n\r\n```python\r\nfrom models import User\r\n\r\nuser = User.objects.get(pk=1)\r\nerrors = user.usererror_set.all()\r\n````\r\n\r\nIf you want to access the `plugins`, `device`, or `locale` fields, you will likely\r\nwant to deserialize them first for better use.\r\n\r\n```python\r\nfrom django.utils import simplejson\r\nfrom client_errors.models import UserError\r\n\r\nerror = UserError.objects.get(pk=1)\r\nlocale = simplejson.loads(error.locale)\r\ndevice = simplejson.loads(error.device)\r\nplugins = simplejson.loads(error.plugins)\r\n````\r\n\r\n\r\n## Output\r\n\r\n* `created` 2012-06-16 11:05:56\r\n* `created_by_id` 1   \r\n* `message` Uncaught ReferenceError: foo is not defined    \r\n* `url` http://localhost:8000/app.js\r\n* `loc` 174 \r\n* `os` Mac \r\n* `browser` Chrome\r\n* `version` 19.0.1084.54\r\n* `plugins` {\"flash\":true,\"silverlight\":false,\"java\":true,\"quicktime\":true}\r\n* `device` {\"screen\":{\"width\":1280,\"height\":1024},\"viewport\":{\"width\":1308,\"height\":386},\"is_tablet\":false,\"is_phone\":false,\"is_mobile\":false}\r\n* `locale` {\"country\":\"us\",\"lang\":\"en\"}\r\n\r\n\r\n## Configuration\r\n\r\n* `CLIENT_ERRORS_USER` the user model to connect the errors to (optional, default `django.contrib.auth.models.User`)\r\n* `CLIENT_ERRORS_AUTO` automatic URL injection (optional, default `True`)\r\n* `CLIENT_ERRORS_MEDIA_ROOT` directory to serve the JS media from (optional)\r\n* `CLIENT_ERRORS_TAG` chosen tag to prepend the javascript to (optional, default `</head>`)\r\n\r\n\r\n## License\r\n\r\n(The MIT License)\r\n\r\nCopyright (c) 2011-2012 Beau Sorensen <mail@beausorensen.com>\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining\r\na copy of this software and associated documentation files (the\r\n'Software'), to deal in the Software without restriction, including\r\nwithout limitation the rights to use, copy, modify, merge, publish,\r\ndistribute, sublicense, and/or sell copies of the Software, and to\r\npermit persons to whom the Software is furnished to do so, subject to\r\nthe following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be\r\nincluded in all copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\r\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\r\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\r\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\r\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\r\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n","tagline":"Automatic tracking of javascript errors for Django","google":"UA-21349403-4","note":"Don't delete this file! It's used internally to help with page regeneration."}